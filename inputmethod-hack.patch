From e34b59513422eb905b53d7dc6c0862cea535eb96 Mon Sep 17 00:00:00 2001
From: Marius Gripsgard <marius@ubports.com>
Date: Sun, 16 Sep 2018 15:29:36 +0200
Subject: [PATCH] Hack to allow render of InputMethod under same window as
 requester

This uses last task id it got, this is a masive hack, but *should*
render *mostly* on correct window
---
 .../multi_window_composer_strategy.cpp        | 21 +++++++++++++------
 .../graphics/multi_window_composer_strategy.h |  2 ++
 2 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/src/anbox/graphics/multi_window_composer_strategy.cpp b/src/anbox/graphics/multi_window_composer_strategy.cpp
index 0c58f97d1..aa8c902dc 100644
--- a/src/anbox/graphics/multi_window_composer_strategy.cpp
+++ b/src/anbox/graphics/multi_window_composer_strategy.cpp
@@ -26,13 +26,22 @@ MultiWindowComposerStrategy::MultiWindowComposerStrategy(const std::shared_ptr<w
 std::map<std::shared_ptr<wm::Window>, RenderableList> MultiWindowComposerStrategy::process_layers(const RenderableList &renderables) {
   WindowRenderableList win_layers;
   for (const auto &renderable : renderables) {
-    // Ignore all surfaces which are not meant for a task
-    if (!utils::string_starts_with(renderable.name(), "org.anbox.surface."))
-      continue;
+     wm::Task::Id task_id = 0;
+     // Hack to allow render of InputMethod under same window as requester
+     // This uses last task id it got, this is a masive hack, but *should*
+     // render *mostly* on correct window
+    if (renderable.name() == "InputMethod" && last_task != 0)
+      task_id = last_task;
+    else {
+      // Ignore all surfaces which are not meant for a task
+      if (!utils::string_starts_with(renderable.name(), "org.anbox.surface."))
+        continue;
 
-    wm::Task::Id task_id = 0;
-    if (sscanf(renderable.name().c_str(), "org.anbox.surface.%d", &task_id) != 1 || !task_id)
-      continue;
+      if (sscanf(renderable.name().c_str(), "org.anbox.surface.%d", &task_id) != 1 || !task_id)
+        continue;
+
+      last_task = task_id;
+    }
 
     auto w = wm_->find_window_for_task(task_id);
     if (!w) continue;
diff --git a/src/anbox/graphics/multi_window_composer_strategy.h b/src/anbox/graphics/multi_window_composer_strategy.h
index e7dbdf96d..3d4c760bd 100644
--- a/src/anbox/graphics/multi_window_composer_strategy.h
+++ b/src/anbox/graphics/multi_window_composer_strategy.h
@@ -19,6 +19,7 @@
 #define ANBOX_GRAPHICS_MULTI_WINDOW_COMPOSER_STRATEGY_H_
 
 #include "anbox/graphics/layer_composer.h"
+#include "anbox/wm/manager.h"
 
 #include <memory>
 
@@ -33,6 +34,7 @@ class MultiWindowComposerStrategy : public LayerComposer::Strategy {
 
 private:
   std::shared_ptr<wm::Manager> wm_;
+  wm::Task::Id last_task = 0;
 };
 }  // namespace graphics
 }  // namespace anbox
